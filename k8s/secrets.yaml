apiVersion: v1
kind: Secret
metadata:
  name: aerofusionxr-secrets
  namespace: aerofusionxr
  labels:
    app: aerofusionxr
    component: secrets
type: Opaque
stringData:
  # Database Credentials
  MONGODB_USERNAME: "aerofusion_user"
  MONGODB_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  REDIS_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  
  # JWT Secrets
  JWT_SECRET: "CHANGE_ME_TO_SECURE_RANDOM_STRING_IN_PRODUCTION"
  BIOMETRIC_ENCRYPTION_KEY: "CHANGE_ME_TO_SECURE_ENCRYPTION_KEY"
  
  # External API Keys
  OPENAI_API_KEY: "CHANGE_ME_TO_ACTUAL_OPENAI_KEY"
  TRANSLATION_API_KEY: "CHANGE_ME_TO_ACTUAL_TRANSLATION_KEY"
  PAYMENT_GATEWAY_SECRET: "CHANGE_ME_TO_ACTUAL_PAYMENT_SECRET"
  
  # Cloud Storage
  AWS_ACCESS_KEY_ID: "CHANGE_ME_TO_ACTUAL_AWS_KEY"
  AWS_SECRET_ACCESS_KEY: "CHANGE_ME_TO_ACTUAL_AWS_SECRET"
  S3_BUCKET_NAME: "aerofusionxr-assets"
  
  # Monitoring
  GRAFANA_ADMIN_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  PROMETHEUS_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  
  # SMTP Configuration
  SMTP_USERNAME: "notifications@aerofusionxr.com"
  SMTP_PASSWORD: "CHANGE_ME_TO_ACTUAL_SMTP_PASSWORD"
  
  # Webhook Secrets
  WEBHOOK_SECRET: "CHANGE_ME_TO_SECURE_WEBHOOK_SECRET"
---
apiVersion: v1
kind: Secret
metadata:
  name: aerofusionxr-tls
  namespace: aerofusionxr
  labels:
    app: aerofusionxr
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded TLS certificate and key
  # Generate with: kubectl create secret tls aerofusionxr-tls --cert=path/to/tls.crt --key=path/to/tls.key
  tls.crt: LS0tLS1CRUdJTi... # Replace with actual certificate
  tls.key: LS0tLS1CRUdJTi... # Replace with actual private key 