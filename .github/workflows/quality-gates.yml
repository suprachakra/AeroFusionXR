name: üõ°Ô∏è Quality Gates & Clean Architecture Enforcement

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ============================================================================
  # Phase 1: Fast Feedback Loop (< 5 minutes)
  # ============================================================================
  
  lint-and-format:
    name: üßπ Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üßπ ESLint Check
        run: npm run lint
      
      - name: üíÖ Prettier Format Check
        run: npm run format:check
      
      - name: üîß TypeScript Type Check
        run: npm run typecheck

  duplication-detection:
    name: üîç Zero Duplication Enforcement
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîç Advanced Duplication Detection
        run: npm run quality:duplication
      
      - name: üìä Upload Duplication Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: duplication-report
          path: reports/duplication-report.json
          retention-days: 30

  dependency-validation:
    name: üèóÔ∏è Architecture Boundary Enforcement
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üèóÔ∏è Validate Service Dependencies
        run: npm run quality:dependencies
      
      - name: üìä Upload Dependency Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: reports/dependency-report.json
          retention-days: 30

  # ============================================================================
  # Phase 2: Comprehensive Testing (< 15 minutes)
  # ============================================================================
  
  unit-tests:
    name: üß™ Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-format, duplication-detection, dependency-validation]
    
    strategy:
      matrix:
        workspace: [packages, services]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üß™ Run Tests with Coverage
        run: npm run test:coverage
        env:
          CI: true
      
      - name: üìä Coverage Threshold Check
        run: |
          if [ "${{ matrix.workspace }}" = "packages" ]; then
            npx istanbul-threshold-checker --coverage coverage/coverage-summary.json --threshold 90
          else
            npx istanbul-threshold-checker --coverage coverage/coverage-summary.json --threshold 80
          fi
      
      - name: üìà Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage
          fail_ci_if_error: true

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: aerofusionxr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîó Run Integration Tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/aerofusionxr_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # ============================================================================
  # Phase 3: Security & Performance (< 10 minutes)
  # ============================================================================
  
  security-scan:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-format]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîí NPM Security Audit
        run: npm audit --audit-level moderate
      
      - name: üõ°Ô∏è Snyk Security Scan
        run: npx snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
      
      - name: üìä CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: typescript, javascript

  performance-tests:
    name: ‚ö° Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [unit-tests]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: ‚ö° Run Performance Tests
        run: npm run performance:test
      
      - name: üìä Upload Performance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: reports/performance-report.json
          retention-days: 30

  # ============================================================================
  # Phase 4: Build & Container Validation (< 8 minutes)
  # ============================================================================
  
  build-validation:
    name: üèóÔ∏è Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [duplication-detection, dependency-validation]
    
    strategy:
      matrix:
        target: [packages, services, clients]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üèóÔ∏è Build ${{ matrix.target }}
        run: npm run build:${{ matrix.target }}
      
      - name: üì¶ Verify Build Artifacts
        run: |
          echo "üîç Verifying build artifacts for ${{ matrix.target }}..."
          find ${{ matrix.target }} -name "dist" -type d | head -5
          echo "‚úÖ Build artifacts verified"

  container-security:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-validation]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üê≥ Build Docker Image
        run: |
          docker build -t aerofusionxr:latest .
          docker build -t aerofusionxr:${{ github.sha }} .
      
      - name: üõ°Ô∏è Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aerofusionxr:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      
      - name: üìä Upload Trivy Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Phase 5: Quality Gate Summary (Final Decision)
  # ============================================================================
  
  quality-gate-summary:
    name: üéØ Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [
      lint-and-format,
      duplication-detection,
      dependency-validation,
      unit-tests,
      integration-tests,
      security-scan,
      performance-tests,
      build-validation,
      container-security
    ]
    if: always()
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üìä Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: reports/
      
      - name: üìã Generate Quality Summary
        run: |
          echo "# üéØ AeroFusionXR Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- üßπ **Lint & Format**: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîç **Duplication Check**: ${{ needs.duplication-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è **Dependencies**: ${{ needs.dependency-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîó **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üîí **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö° **Performance**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è **Build**: ${{ needs.build-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ **Container Security**: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all critical gates passed
          if [[ "${{ needs.lint-and-format.result }}" == "success" ]] && \
             [[ "${{ needs.duplication-detection.result }}" == "success" ]] && \
             [[ "${{ needs.dependency-validation.result }}" == "success" ]] && \
             [[ "${{ needs.unit-tests.result }}" == "success" ]] && \
             [[ "${{ needs.build-validation.result }}" == "success" ]]; then
            echo "## ‚úÖ **QUALITY GATE PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All critical quality checks have passed. This code meets AeroFusionXR excellence standards." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå **QUALITY GATE FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical quality checks have failed. Please review and fix before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      
      - name: üéâ Success Notification
        if: success()
        run: |
          echo "üéâ Quality Gate Passed! Code is ready for deployment."
          echo "üìä All quality metrics are within acceptable thresholds."
          echo "üöÄ This build meets AeroFusionXR enterprise standards."

  # ============================================================================
  # Optional: Nightly Deep Analysis
  # ============================================================================
  
  nightly-deep-scan:
    name: üåô Nightly Deep Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì• Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: üîç Deep Code Analysis
        run: |
          echo "üåô Running nightly deep analysis..."
          npm run quality:all
          npm run analyze:bundle
          npm run metrics
      
      - name: üìä Generate Comprehensive Report
        run: |
          echo "üìä Generating comprehensive quality report..."
          # Add comprehensive reporting logic here
      
      - name: üìß Send Report
        # Add notification logic for teams
        run: echo "üìß Deep analysis complete. Report sent to development teams." 