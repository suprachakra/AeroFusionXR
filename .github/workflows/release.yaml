name: 🚀 Release Automation

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

env:
  NODE_VERSION: '18'

jobs:
  # ===== SEMANTIC RELEASE =====
  semantic-release:
    name: 📦 Semantic Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Run tests
      run: npm run test:ci
    
    - name: 🏗️ Build project
      run: npm run build
    
    - name: 📝 Generate release
      id: release
      uses: cycjimmy/semantic-release-action@v4
      with:
        semantic_version: 22
        extra_plugins: |
          @semantic-release/changelog@6.0.3
          @semantic-release/git@10.0.1
          conventional-changelog-conventionalcommits@7.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ===== DOCKER RELEASE =====
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'
    
    strategy:
      matrix:
        service: [api-gateway, ai-concierge, flight-info, baggage-tracker, wayfinding, commerce, booking, model-registry, feature-store]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/${{ matrix.service }}
          aerofusionxr/${{ matrix.service }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.semantic-release.outputs.version }}
          type=raw,value=latest
    
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.semantic-release.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          COMMIT_SHA=${{ github.sha }}

  # ===== HELM CHART RELEASE =====
  helm-release:
    name: ⚓ Helm Chart Release
    runs-on: ubuntu-latest
    needs: [semantic-release, docker-release]
    if: needs.semantic-release.outputs.released == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: 📦 Package Helm chart
      run: |
        helm package ./infrastructure/helm/aerofusion \
          --version ${{ needs.semantic-release.outputs.version }} \
          --app-version ${{ needs.semantic-release.outputs.version }}
    
    - name: 🚀 Release Helm chart
      uses: helm/chart-releaser-action@v1.6.0
      with:
        charts_dir: infrastructure/helm
      env:
        CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== DEPLOYMENT TO STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [semantic-release, helm-release]
    if: needs.semantic-release.outputs.released == 'true'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: 🔑 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: 🔧 Update kubeconfig
      run: aws eks update-kubeconfig --name aerofusion-staging-cluster
    
    - name: 🚀 Deploy with Helm
      run: |
        helm upgrade --install aerofusion-staging ./infrastructure/helm/aerofusion \
          --namespace aerofusion-staging \
          --create-namespace \
          --set environment=staging \
          --set image.tag=${{ needs.semantic-release.outputs.version }} \
          --values ./infrastructure/helm/values-staging.yaml \
          --wait --timeout=600s
    
    - name: ✅ Verify deployment
      run: |
        kubectl rollout status deployment/api-gateway -n aerofusion-staging
        kubectl get pods -n aerofusion-staging

  # ===== SECURITY SCAN =====
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: docker-release
    if: needs.semantic-release.outputs.released == 'true'
    
    strategy:
      matrix:
        service: [api-gateway, ai-concierge, flight-info, baggage-tracker, wayfinding, commerce, booking, model-registry, feature-store]
    
    steps:
    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ needs.semantic-release.outputs.version }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ===== UPDATE PRODUCTION MANIFEST =====
  update-production-manifest:
    name: 📝 Update Production Manifest
    runs-on: ubuntu-latest
    needs: [semantic-release, deploy-staging]
    if: needs.semantic-release.outputs.released == 'true'
    
    steps:
    - name: 📥 Checkout production manifests repo
      uses: actions/checkout@v4
      with:
        repository: aerofusionxr/production-manifests
        token: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}
        path: production-manifests
    
    - name: 📝 Update version in manifests
      run: |
        cd production-manifests
        sed -i 's/tag: .*/tag: ${{ needs.semantic-release.outputs.version }}/' values-production.yaml
        git config user.name "Release Bot"
        git config user.email "release-bot@aerofusionxr.com"
        git add values-production.yaml
        git commit -m "🚀 Release v${{ needs.semantic-release.outputs.version }}"
        git push

  # ===== NOTIFICATION =====
  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [semantic-release, deploy-staging]
    if: always() && needs.semantic-release.outputs.released == 'true'
    
    steps:
    - name: 📢 Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        title: '🚀 AeroFusionXR Release v${{ needs.semantic-release.outputs.version }}'
        text: |
          Release v${{ needs.semantic-release.outputs.version }} has been deployed to staging!
          
          📦 Docker images published to GHCR and Docker Hub
          ⚓ Helm chart released
          🚀 Deployed to staging environment
          🛡️ Security scans completed
          
          Ready for production deployment approval.
        
    - name: 📧 Email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: '🚀 AeroFusionXR v${{ needs.semantic-release.outputs.version }} Released'
        to: releases@aerofusionxr.com
        from: ci-cd@aerofusionxr.com
        body: |
          Release v${{ needs.semantic-release.outputs.version }} has been successfully deployed to staging.
          
          Release Details:
          - Version: v${{ needs.semantic-release.outputs.version }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Deployed to: Staging Environment
          
          Next Steps:
          - Review staging deployment
          - Approve production deployment
          - Monitor release metrics
          
          View release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.semantic-release.outputs.version }} 