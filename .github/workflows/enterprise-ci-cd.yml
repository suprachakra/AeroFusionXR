name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: aerofusionxr/ai-concierge

jobs:
  # ===================================
  # Code Quality & Security Analysis
  # ===================================
  quality-gate:
    name: Quality Gate Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        service: [ai-concierge, wayfinding-platform, api-gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarQube

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript compilation check
        working-directory: services/${{ matrix.service }}
        run: npx tsc --noEmit --project tsconfig.json

      - name: ESLint analysis
        working-directory: services/${{ matrix.service }}
        run: |
          npx eslint . --ext .ts,.tsx --format json --output-file eslint-report.json || true
          npx eslint . --ext .ts,.tsx --max-warnings 0

      - name: Prettier format check
        working-directory: services/${{ matrix.service }}
        run: npx prettier --check "src/**/*.{ts,tsx,json}"

      - name: Security audit
        working-directory: services/${{ matrix.service }}
        run: |
          npm audit --audit-level=moderate --production
          npx audit-ci --moderate

      - name: License compliance check
        working-directory: services/${{ matrix.service }}
        run: npx license-checker --production --failOn 'GPL;AGPL;LGPL;NGPL'

      - name: Upload quality artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ matrix.service }}
          path: |
            services/${{ matrix.service }}/eslint-report.json
            services/${{ matrix.service }}/coverage/
          retention-days: 30

  # ===================================
  # Comprehensive Testing Suite
  # ===================================
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 20
    
    strategy:
      matrix:
        service: [ai-concierge, wayfinding-platform, api-gateway]
        test-type: [unit, integration, e2e]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: npm ci --prefer-offline

      - name: Setup test environment
        working-directory: services/${{ matrix.service }}
        run: |
          cp .env.test.example .env.test
          npm run test:setup

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: services/${{ matrix.service }}
        run: |
          npm run test:unit -- --coverage --coverageReporters=lcov --coverageReporters=json
          npm run test:coverage:check

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: services/${{ matrix.service }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: npm run test:integration

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        working-directory: services/${{ matrix.service }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:e2e:setup
          npm run test:e2e
          npm run test:e2e:teardown

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.service }}-${{ matrix.test-type }}
          path: |
            services/${{ matrix.service }}/coverage/
            services/${{ matrix.service }}/test-results/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # ===================================
  # Security Scanning
  # ===================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --all-projects

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AeroFusionXR'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
          retention-days: 90

  # ===================================
  # Performance Testing
  # ===================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build application
        working-directory: services/ai-concierge
        run: |
          npm ci
          npm run build

      - name: Start application
        working-directory: services/ai-concierge
        run: |
          npm start &
          sleep 30  # Wait for startup
          
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js --summary-export=load-test-results.json
          k6 run tests/performance/stress-test.js --summary-export=stress-test-results.json

      - name: Performance benchmark check
        run: |
          # Check if P95 response time < 800ms
          node tests/performance/check-benchmarks.js load-test-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: "*-test-results.json"
          retention-days: 30

  # ===================================
  # Build & Container Security
  # ===================================
  build-and-scan:
    name: Build & Container Scan
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite]
    timeout-minutes: 20
    
    strategy:
      matrix:
        service: [ai-concierge, wayfinding-platform, api-gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Scan container with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container security benchmark
        run: |
          # Check for critical vulnerabilities
          trivy image --exit-code 1 --severity CRITICAL \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest

      - name: Push container image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================
  # Deployment to Staging
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/ai-concierge \
            ai-concierge=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ai-concierge:develop-${{ github.sha }}
          kubectl rollout status deployment/ai-concierge --timeout=300s

      - name: Run smoke tests
        run: |
          sleep 60  # Wait for deployment to stabilize
          npm run test:smoke -- --env=staging

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ===================================
  # Production Deployment
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: senior-engineers,sre-team
          minimum-approvals: 2
          issue-title: "Production Deployment Approval"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          kubectl apply -f k8s/production/green/
          kubectl set image deployment/ai-concierge-green \
            ai-concierge=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ai-concierge:main-${{ github.sha }}
          kubectl rollout status deployment/ai-concierge-green --timeout=600s

      - name: Health check and validation
        run: |
          sleep 120  # Wait for full initialization
          npm run test:health -- --env=production-green
          npm run test:contract -- --env=production-green

      - name: Switch traffic to green
        run: |
          kubectl patch service ai-concierge-service \
            -p '{"spec":{"selector":{"version":"green"}}}'
          
      - name: Monitor for 5 minutes
        run: |
          sleep 300
          kubectl get pods -l app=ai-concierge,version=green
          # Check error rates and performance metrics

      - name: Cleanup blue environment
        run: |
          kubectl delete deployment ai-concierge-blue || true

      - name: Update deployment status
        run: |
          echo "Deployment completed at $(date)" >> deployment-log.txt
          git tag "release-$(date +%Y%m%d-%H%M%S)"

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # ===================================
  # Rollback Capability
  # ===================================
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    environment: production
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Emergency rollback
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Rollback to previous stable version
          kubectl rollout undo deployment/ai-concierge-green
          kubectl rollout status deployment/ai-concierge-green --timeout=300s

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 EMERGENCY ROLLBACK EXECUTED",
              "color": "danger",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Triggered by",
                  "value": "${{ github.actor }}",
                  "short": true
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 